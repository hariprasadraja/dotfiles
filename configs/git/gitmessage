# <type>: (If applied, this commit will...) <subject> (Max 50 char)
# Type can be
#    feature      (implementing new feature | <feature-branch-name>)
#    bug-fix      (issues found by QA and fixed)
#    dev-fix      (issues found during Dev and fixed)
#    refactor     (refactoring code to improve performance)
#    clean        (formatting, missing semi colons, etc; no code change)
#    docs         (changes to documentation)
#    test         (adding or refactoring tests; no production code change)
#    wip          (work in progress, may have breaking changes)
# |<----  Using a Maximum Of 50 Characters  ---->|



# |<---- List of Changes Made ---->|

# 1.
# 2.
# 3.


# |<---- Bug Fix ---->|

# Bug ID: XXX
# Root Cause: XXX
# Solution Taken: XXX

# |<---- Crash Log ---->|

# Crash:
# Log:


# Explain why this change is being made
# <type>: (If applied, this commit will...) <explanation> (Max 72 char)
# Type can be
#     needs         (requiements)
#     bug           (bug id,cause & solution taken) # Example #23 cause: XXX solution: XXX
#     discuss       (discussions made with peers,their names/email)
#     changes       (list of changes made)
#     crash         (crash log)
# |<----   Try To Limit Each Line to a Maximum Of 72 Characters   ---->|



# Provide links or keys to any relevant tickets, articles, discussions or other resources
# Example: JIRA issue #23



# --- COMMIT END ---

# --------------------
# Remember to
#    Capitalize the subject line
#    Use the imperative mood in the subject line
#    Do not end the subject line with a period
#    Separate subject from body with a blank line
#    Use the body to explain what and why vs. how
#    Can use multiple lines with "-" for bullet points in body
#    Descibe Bugs with BugID,It's Root Cause and Solution.
#    Do not forget to add previous commit id for cherry picked commit messages.
# --------------------
# For more information about this template, check out
# https://gist.github.com/ef942420f243e22f925c5ed13b052439#file-commit-template-git


